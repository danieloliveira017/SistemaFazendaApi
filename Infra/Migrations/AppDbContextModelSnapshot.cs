// <auto-generated />
using System;
using Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Core.Models.CustoPlantacaoModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCusto")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCusto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlantacaoId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlantacaoId");

                    b.ToTable("CustoPlantacaos");
                });

            modelBuilder.Entity("Core.Models.FarmModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaHectares")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RegistroFazenda");
                });

            modelBuilder.Entity("Core.Models.FinancaModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CustoPlantacaoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ManutencaoMaquinaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustoPlantacaoId");

                    b.HasIndex("FarmId");

                    b.HasIndex("ManutencaoMaquinaId");

                    b.ToTable("RegistroFinanca");
                });

            modelBuilder.Entity("Core.Models.ManutencaoMaquinaModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateManutencao")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MaquinaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoManutencao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorManutencao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaquinaId");

                    b.ToTable("ManutencaoMaquina");
                });

            modelBuilder.Entity("Core.Models.MaquinaModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCadastro")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMaquina")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("RegistroMaquina");
                });

            modelBuilder.Entity("Core.Models.PlantacaoModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCadastro")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("TEXT");

                    b.Property<double>("QuantidadeHectares")
                        .HasColumnType("REAL");

                    b.Property<string>("TipoPlantio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("RegistroPlantacao");
                });

            modelBuilder.Entity("Core.Models.UserFarmModell", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataVicuclo")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoAcesso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "FarmId");

                    b.HasIndex("FarmId");

                    b.ToTable("UserFarm");
                });

            modelBuilder.Entity("Core.Models.UserModell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("lower(hex(randomblob(16)))");

                    b.Property<string>("Classifica")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCadastro")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RegistroUsuario");
                });

            modelBuilder.Entity("Core.Models.CustoPlantacaoModell", b =>
                {
                    b.HasOne("Core.Models.PlantacaoModell", "Plantacao")
                        .WithMany("Custos")
                        .HasForeignKey("PlantacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Plantacao");
                });

            modelBuilder.Entity("Core.Models.FinancaModell", b =>
                {
                    b.HasOne("Core.Models.CustoPlantacaoModell", "CustoPlantacao")
                        .WithMany("Financas")
                        .HasForeignKey("CustoPlantacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.FarmModell", "Farm")
                        .WithMany("Financas")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.ManutencaoMaquinaModell", "Manutencao")
                        .WithMany("Financas")
                        .HasForeignKey("ManutencaoMaquinaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CustoPlantacao");

                    b.Navigation("Farm");

                    b.Navigation("Manutencao");
                });

            modelBuilder.Entity("Core.Models.ManutencaoMaquinaModell", b =>
                {
                    b.HasOne("Core.Models.MaquinaModell", "Maquina")
                        .WithMany("Manutencoes")
                        .HasForeignKey("MaquinaId");

                    b.Navigation("Maquina");
                });

            modelBuilder.Entity("Core.Models.MaquinaModell", b =>
                {
                    b.HasOne("Core.Models.FarmModell", "Farm")
                        .WithMany("Maquinas")
                        .HasForeignKey("FarmId");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Core.Models.PlantacaoModell", b =>
                {
                    b.HasOne("Core.Models.FarmModell", "Farm")
                        .WithMany("Plantacoes")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Core.Models.UserFarmModell", b =>
                {
                    b.HasOne("Core.Models.FarmModell", "Farm")
                        .WithMany("UserFarms")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModell", "User")
                        .WithMany("UserFams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.CustoPlantacaoModell", b =>
                {
                    b.Navigation("Financas");
                });

            modelBuilder.Entity("Core.Models.FarmModell", b =>
                {
                    b.Navigation("Financas");

                    b.Navigation("Maquinas");

                    b.Navigation("Plantacoes");

                    b.Navigation("UserFarms");
                });

            modelBuilder.Entity("Core.Models.ManutencaoMaquinaModell", b =>
                {
                    b.Navigation("Financas");
                });

            modelBuilder.Entity("Core.Models.MaquinaModell", b =>
                {
                    b.Navigation("Manutencoes");
                });

            modelBuilder.Entity("Core.Models.PlantacaoModell", b =>
                {
                    b.Navigation("Custos");
                });

            modelBuilder.Entity("Core.Models.UserModell", b =>
                {
                    b.Navigation("UserFams");
                });
#pragma warning restore 612, 618
        }
    }
}
